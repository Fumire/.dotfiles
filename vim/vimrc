scriptencoding utf-8
set encoding=utf-8 nobomb

" plug settings
if empty(glob('$HOME/.vim/autoload/plug.vim'))
    silent !curl --fail --location --output $HOME/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'bling/vim-bufferline'
Plug 'airblade/vim-gitgutter'
Plug 'Chiel92/vim-autoformat'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-commentary'
Plug 'mbbill/undotree'
Plug 'Yggdroot/indentLine'
Plug 'majutsushi/tagbar'
Plug 'chrisbra/csv.vim'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'L3MON4D3/LuaSnip'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'tzachar/cmp-tabnine', { 'do': './install.sh' }

Plug 'davidhalter/jedi-vim'
if v:version > 800
    Plug 'jalvesaq/Nvim-R', {'for': ['r', 'R']}
endif
Plug 'pangloss/vim-javascript', {'for': 'js'}

Plug 'johngrib/vim-game-code-break'
call plug#end()

" Color scheme
if empty(glob('$HOME/.vim/colors/jellybeans.vim'))
    silent !curl --fail --location --output $HOME/.vim/colors/jellybeans.vim --create-dirs https://raw.githubusercontent.com/nanotech/jellybeans.vim/master/colors/jellybeans.vim
endif
if has('syntax')
    syntax on
endif
colorscheme jellybeans

" CSV settings
map <C-d> :NewDelimiter

" SingleCompile settings
map <F12> :SingleCompile <Return>

" Undotree settings
nnoremap <F8> :UndotreeToggle <Return>

" Nerdtree settings
map <silent> <F9> :NERDTreeToggle <Return>
let NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden = 1
let NERDTreeWinPos = 'left'
let NERDTreeIgnore = ['\.pyc$', '\.swp$', '\.git$', '\.DS_Store$', '\.mypy_cache$']
let NERDTreeShowLineNumbers = 1

" Tagbar settings
map <silent> <F10> :TagbarToggle <Return>

" autoformat settings
nnoremap <silent> <leader>af :Autoformat <Return>
let g:formatdef_my_astyle = '"astyle --style=bsd --indent=spaces=4 --indent-preproc-block --indent-preproc-define --indent-col1-comments --pad-oper --pad-comma --unpad-paren --break-closing-braces --add-braces --attach-return-type --align-pointer=type --delete-empty-lines --add-one-line-braces --align-reference=type --break-blocks"'
let g:formatters_java = ['my_astyle']
let g:formatters_cpp = ['my_astyle']
let g:formatters_c = ['my_astyle']
let g:formatters_my_js = '"js-beautify --space-in-paren --space-after-anon-function --space-after-named-function --brace-style none";'
let g:formatters_js = ['my_js']
let g:formatdef_myautopep8 = '"autopep8 --ignore E501 --aggressive --aggressive -"'
let g:formatters_python = ['myautopep8']
let g:formatters_perl = ['perltidy']
autocmd FileType vim,tex let g:autoformat_autoindent=0

" syntastic settings
let g:ale_linters = {'make': ['checkmake'], 'python': ['ruff', 'mypy'], 'sh': ['language_server'], 'R': ['lintr'], 'vim': ['vint']}
let g:ale_python_ruff_options = '--select E,F,W,N --ignore E501'
let g:ale_python_mypy_options = '--ignore-missing-imports --install-types --non-interactive'
let g:ale_disable_lsp = 1
let g:ale_completion_enabled = 0

" indent and tab settings
filetype indent plugin on
set autoindent
set smartindent
set shiftwidth=4
set expandtab
set tabstop=4
set softtabstop=4

" change Tab to Space
autocmd FileType c retab
autocmd FileType cpp retab
autocmd FileType py retab

" general settings
set wrap
set linebreak
set showbreak=·····
set ruler
if has("gui_macvim")
	set cursorline
endif
set laststatus=2
set showcmd
set showmatch
set matchtime=3
set autoread
set scrolloff=3
set wildmenu
set wildmode=longest:full,full
set noshowmode
set relativenumber
set number
set hidden
set wildignore+=*.swp,*.pyc,.mypy_cache,.git,.DS_Store
set backspace=indent,eol,start
set list
set listchars=tab:⇥\ ,trail:·,precedes:«,extends:»,eol:¶,nbsp:_
set background=dark
set title
set binary
set noeol

" backup settings
set nobackup
set nowritebackup
set noswapfile

" search settings
set ignorecase
set smartcase
set hlsearch
set incsearch
set showcmd

" status line settings
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

" use OS clipboard
set clipboard=unnamed

" use mouse
if has('mouse')
    set mouse=a
endif

" airline settings
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s:'

" jedi (Python autocompletion) settings
let g:pymode_rope = 0
autocmd FileType python setlocal completeopt-=preview

" Tab settings
nnoremap <C-t> :enew <Return>
nnoremap <silent> <C-h> :bprevious <Return>
nnoremap <silent> <C-l> :bnext <Return>
nnoremap <silent> <C-q> :bprevious <BAR> bdelete #<Return>

" keymap
nnoremap <silent> <SPACE> :set hlsearch! <Return>
nnoremap <C-w>m :split <Return>
nnoremap <C-w>l :vsplit <Return>
command! GetPDF hardcopy > %.ps | !ps2pdf %.ps && rm %.ps && echo 'Created: %.pdf'

lua << EOF
local cmp = require('cmp')
local luasnip = require('luasnip')

local tabnine = require('cmp_tabnine.config')

tabnine:setup({
	max_lines = 1000,
	max_num_results = 20,
	sort = true,
	run_on_every_keystroke = true,
	snippet_placeholder = '..',
	ignored_file_types = {
		-- default is not to ignore
		-- uncomment to ignore in lua:
		-- lua = true
	},
	show_prediction_strength = false,
	min_percent = 0
})

cmp.setup({
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },

  sources = cmp.config.sources({
    { name = 'cmp_tabnine' },
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
    { name = 'buffer' },
    { name = 'path' },
  }),

  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),

    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),

    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  }),
})
EOF
